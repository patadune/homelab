services:
    traefik:
        image: traefik:v3.3.2
        container_name: traefik
        command:
            - "--log.level=INFO"
            - "--api.dashboard=true"
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--providers.file.filename=/etc/traefik/rules.yaml"
            - "--entrypoints.lan.address=:80"
            - "--entryPoints.lan.http.redirections.entryPoint.to=lansecure"
            - "--entryPoints.lan.http.redirections.entryPoint.scheme=https"
            - "--entrypoints.lansecure.address=:443"
            - "--entrypoints.lansecure.http.tls=true"
            - "--entrypoints.lansecure.http.tls.certResolver=le"
            - "--entrypoints.lansecure.http.tls.domains[0].main=${LAN_DOMAIN}"
            - "--entrypoints.lansecure.http.tls.domains[0].sans=*.${LAN_DOMAIN}"
            - "--entrypoints.websecure.address=:13443"
            - "--entrypoints.websecure.http.tls=true"
            - "--entrypoints.websecure.http.tls.certResolver=le"
            - "--entrypoints.websecure.http.tls.domains[0].main=${WEB_DOMAIN}"
            - "--entrypoints.websecure.http.tls.domains[0].sans=*.${WEB_DOMAIN}"
            - "--certificatesResolvers.le.acme.email=${EMAIL}"
            - "--certificatesResolvers.le.acme.storage=/etc/traefik/acme.json"
            - "--certificatesResolvers.le.acme.dnsChallenge.provider=infomaniak"
            - "--certificatesResolvers.le.acme.dnsChallenge.delayBeforeCheck=10"
        ports:
            - 80:80
            - 443:443
            - 13443:13443
        expose:
            - 8080
        volumes:
            # So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock
            - ${BASE_PATH}/traefik/:/etc/traefik/
        environment:
            - INFOMANIAK_ACCESS_TOKEN
            - WEB_DOMAIN
            - LAN_DOMAIN
        labels:
            - traefik.enable=true
            - traefik.http.routers.traefik.entryPoints=lansecure
            - traefik.http.routers.traefik.rule=Host(`traefik.${LAN_DOMAIN}`)
            - traefik.http.services.traefik.loadbalancer.server.port=8080
        restart: unless-stopped

    portainer:
        image: portainer/portainer-ce:2.26.1-alpine
        container_name: portainer
        expose:
            - 9000
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ${BASE_PATH}/portainer:/data
        labels:
            - traefik.enable=true
            - traefik.http.routers.portainer.entryPoints=lansecure
            - traefik.http.routers.portainer.rule=Host(`portainer.${LAN_DOMAIN}`)
            - traefik.http.services.portainer.loadbalancer.server.port=9000
        restart: unless-stopped

    prowlarr:
        image: lscr.io/linuxserver/prowlarr:1.30.2
        container_name: prowlarr
        volumes:
            - ${BASE_PATH}/prowlarr:/config
        environment:
            - PUID
            - PGID
            - TZ
        labels:
            - traefik.enable=true
            - traefik.http.routers.prowlarr.entryPoints=lansecure
            - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${LAN_DOMAIN}`)
        expose:
            - 9696
        restart: unless-stopped

    sonarr:
        image: lscr.io/linuxserver/sonarr:4.0.12
        container_name: sonarr
        volumes:
            - ${BASE_PATH}/sonarr:/config
            - /volume1/Media:/media
        environment:
            - PUID
            - PGID
            - TZ
        labels:
            - traefik.enable=true
            - traefik.http.routers.sonarr.entryPoints=lansecure
            - traefik.http.routers.sonarr.rule=Host(`sonarr.${LAN_DOMAIN}`)
        expose:
            - 8989
        restart: unless-stopped

    bazarr:
        image: lscr.io/linuxserver/bazarr:1.5.1
        container_name: bazarr
        volumes:
            - ${BASE_PATH}/bazarr:/config
            - /volume1/Media:/media
        environment:
            - PUID
            - PGID
            - TZ
        labels:
            - traefik.enable=true
            - traefik.http.routers.bazarr.entryPoints=lansecure
            - traefik.http.routers.bazarr.rule=Host(`bazarr.${LAN_DOMAIN}`)
        expose:
            - 6767
        restart: unless-stopped

    radarr:
        image: lscr.io/linuxserver/radarr:5.18.4
        container_name: radarr
        volumes:
            - ${BASE_PATH}/radarr:/config
            - /volume1/Media:/media
        environment:
            - PUID
            - PGID
            - TZ
        labels:
            - traefik.enable=true
            - traefik.http.routers.radarr.entryPoints=lansecure
            - traefik.http.routers.radarr.rule=Host(`radarr.${LAN_DOMAIN}`)
        expose:
            - 7878
        restart: unless-stopped

    qbittorrent:
        container_name: qbittorrent
        image: lscr.io/linuxserver/qbittorrent:5.0.3
        environment:
            - PUID
            - PGID
            - TZ
            - DOCKER_MODS=ghcr.io/gabe565/linuxserver-mod-vuetorrent
        volumes:
            - ${BASE_PATH}/qbittorrent:/config
            - /volume1/Media/Downloads:/media/Downloads
        ports:
            - 6881:6881
            - 6881:6881/udp
        labels:
            - traefik.enable=true
            - traefik.http.routers.qbittorrent.entryPoints=lansecure
            - traefik.http.routers.qbittorrent.rule=Host(`torrent.${LAN_DOMAIN}`)
            - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
        expose:
            - 8080
        restart: unless-stopped

    tautulli:
        image: lscr.io/linuxserver/tautulli:2.15.1
        container_name: tautulli
        volumes:
            - ${BASE_PATH}/tautulli:/config
        environment:
            - PUID
            - PGID
            - TZ
        labels:
            - traefik.enable=true
            - traefik.http.routers.tautulli.entryPoints=lansecure
            - traefik.http.routers.tautulli.rule=Host(`tautulli.${LAN_DOMAIN}`)
        expose:
            - 8181
        restart: unless-stopped

    calibre:
        image: linuxserver/calibre:7.24.0
        container_name: calibre
        restart: unless-stopped
        environment:
            - TZ
            - PUID
            - PGID
            - CUSTOM_USER
            - PASSWORD
        volumes:
            - ${BASE_PATH}/calibre:/config
            - /volume1/Media/Books:/media/Books
        labels:
            - traefik.enable=true
            - traefik.http.routers.calibre.entryPoints=lansecure
            - traefik.http.routers.calibre.rule=Host(`calibre.${LAN_DOMAIN}`)
            - traefik.http.routers.calibre.service=calibre
            - traefik.http.services.calibre.loadbalancer.server.port=8080
            - traefik.http.routers.books.entryPoints=lansecure
            - traefik.http.routers.books.rule=Host(`books.${LAN_DOMAIN}`)
            - traefik.http.routers.books.service=books
            - traefik.http.services.books.loadbalancer.server.port=8081

    home-assistant:
        image: homeassistant/home-assistant:2025.2
        container_name: home-assistant
        volumes:
            - ${BASE_PATH}/home-assistant:/config
        environment:
            - TZ
        network_mode: host
        expose:
            - 8123
        restart: unless-stopped

    paperless-valkey:
        image: valkey/valkey:8.0.2-alpine
        container_name: paperless-valkey
        restart: unless-stopped
        volumes:
            - ${BASE_PATH}/valkey:/data

    paperless:
        image: ghcr.io/paperless-ngx/paperless-ngx:2.14.5
        container_name: paperless
        depends_on:
            - paperless-valkey
        volumes:
            - ${BASE_PATH}/paperless/data:/usr/src/paperless/data
            - ${BASE_PATH}/paperless/media:/usr/src/paperless/media
            - ${BASE_PATH}/paperless/export:/usr/src/paperless/export
            - ${BASE_PATH}/paperless/consume:/usr/src/paperless/consume
        environment:
            PAPERLESS_REDIS: redis://paperless-valkey:6379
            USERMAP_UID: ${PUID}
            USERMAP_GID: ${PGID}
            PAPERLESS_URL: https://paperless.${LAN_DOMAIN}
            PAPERLESS_TIME_ZONE: ${TZ}
            PAPERLESS_OCR_LANGUAGE: fra
        labels:
            - traefik.enable=true
            - traefik.http.routers.paperless.entryPoints=lansecure
            - traefik.http.routers.paperless.rule=Host(`paperless.${LAN_DOMAIN}`)
        expose:
            - 8000
        restart: unless-stopped

    actual_server:
        image: ghcr.io/actualbudget/actual-server:25.2.1-alpine
        container_name: actual-server
        volumes:
            - ${BASE_PATH}/actual:/data
        labels:
            - traefik.enable=true
            - traefik.http.routers.actual.entryPoints=lansecure
            - traefik.http.routers.actual.rule=Host(`actual.${LAN_DOMAIN}`)
        expose:
            - 5006
        restart: unless-stopped

    adguard:
        image: adguard/adguardhome:v0.107.56
        container_name: adguard
        ports:
            - 53:53/udp
        volumes:
            - ${BASE_PATH}/adguard/work:/opt/adguardhome/work
            - ${BASE_PATH}/adguard/conf:/opt/adguardhome/conf
        labels:
            - traefik.enable=true
            - traefik.http.routers.adguard.entryPoints=lansecure
            - traefik.http.routers.adguard.rule=Host(`adguard.${LAN_DOMAIN}`)
            - traefik.http.services.adguard.loadbalancer.server.port=3000
        restart: unless-stopped

    immich-server:
        container_name: immich_server
        image: ghcr.io/immich-app/immich-server:v1.126.1
        volumes:
            - /volume1/Archive/Photos:/usr/src/app/upload
        labels:
            - traefik.enable=true
            - traefik.http.routers.immich.entryPoints=lansecure
            - traefik.http.routers.immich.rule=Host(`immich.${LAN_DOMAIN}`)
            - traefik.http.services.immich.loadbalancer.server.port=2283
        environment:
            REDIS_HOSTNAME: immich-redis
            DB_HOSTNAME: immich-db
            DB_USERNAME: ${IMMICH_DB_USERNAME}
            DB_PASSWORD: ${IMMICH_DB_PASSWORD}
            DB_DATABASE_NAME: ${IMMICH_DB_DATABASE_NAME}
            TZ: ${TZ}
        devices:
            - /dev/dri:/dev/dri
        depends_on:
            - immich-redis
            - immich-db
        restart: unless-stopped

    immich-machine-learning:
        container_name: immich_machine_learning
        image: ghcr.io/immich-app/immich-machine-learning:v1.125.7
        volumes:
            - model-cache:/cache
        environment:
            DB_USERNAME: ${IMMICH_DB_USERNAME}
            DB_PASSWORD: ${IMMICH_DB_PASSWORD}
            DB_DATABASE_NAME: ${IMMICH_DB_DATABASE_NAME}
            TZ: ${TZ}
        restart: unless-stopped
        healthcheck:
            disable: false

    immich-redis:
        container_name: immich_redis
        image: redis:6.2-alpine
        healthcheck:
            test: redis-cli ping || exit 1
        restart: unless-stopped

    immich-db:
        container_name: immich_postgres
        image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0
        environment:
            POSTGRES_USER: ${IMMICH_DB_USERNAME}
            POSTGRES_PASSWORD: ${IMMICH_DB_PASSWORD}
            POSTGRES_DB: ${IMMICH_DB_DATABASE_NAME}
            POSTGRES_INITDB_ARGS: '--data-checksums'
        volumes:
            - ${BASE_PATH}/immich-db:/var/lib/postgresql/data
        command: ["postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
        restart: unless-stopped

volumes:
    model-cache:

networks:
    default:
        driver: bridge
